#!/usr/bin/env python
import multiprocessing
import threading
import datetime
import sys, os
import logging
import imp
import yaml
import pprint
import argparse
import paramiko
import re
import subprocess
import signal
from pprint import pprint as pp
from time import sleep, time
from lxml import etree
from shutil import copyfile
from jnpr.junos import Device
from jnpr.junos.utils.fs import FS
from jnpr.junos.utils.config import Config
from jnpr.junos.utils.start_shell import StartShell
from jnpr.junos.utils.sw import SW
from jnpr.junos.utils.scp import SCP
from jnpr.junos.exception import *
script_folder = os.path.dirname(os.path.realpath(__file__))
options                  = {}
options['user']          = 'labroot'       # -u, --user <USER>
options['password']      = 'lab123'        # -p, --password <PASSWORD>
options['host_file']     = script_folder + '/host-lists.txt'
options['cli_file']      = script_folder + '/cli-lists.txt'   
options['yaml_file']     = None   # -C, --cli_file <CLI_FILE>
options['log_dir']       = os.path.expanduser('~/pypuller_logs') # -l
options['commit']        = False               # -g, --git
options['host_list']     = []
options['cli_list']      = []
options['normalize']     = False
options['attempt_max']   = 2
options['debug']         = 0
options['protocol']      = 'ssh'    # 'netconf', 'smart'
options['port']          = 22
options['processes']     = multiprocessing.cpu_count() * 3
options['re0']           = None
options['re1']           = None
options['package']       = '/var/tmp/junos-install-mx-x86-64-15.1F2-S13.tgz'
options['iteration_max'] = 2
options['force_hfile']   = False
options['result']        = False
def myprogress(dev, report):            # {{{2}}}
    print "++++%s host %s ISSU progress: %s" % (curr_time(), dev.hostname,
                                                  report)
def curr_time():                                # {{{2}}}
    return '{:%Y_%m_%d_%H_%M_%S}'.format(datetime.datetime.now())
def write_file(fname, string, flag='a'):          # {{{2}}}
    action = {}
    action['a'] = "append"
    action['w'] = "write"
    try:
        with open(fname, flag) as f:
            mylogger.debug("%s to file %s" % (action[flag], fname))
            f.write(string)
    except Exception as e:
        mylogger.debug("file %s ERROR: %s" % (action[flag], fname))
        mylogger.debug(e)
def logger(terse=False):                           # {{{2}}}
    '''
    configure and define a logger
    '''
    logging.VERBOSE = 9
    logging.addLevelName(logging.VERBOSE, "VERBOSE")
    def verbose(self, message, *args, **kws):
        if self.isEnabledFor(logging.VERBOSE):
            self._log(logging.VERBOSE, message, args, **kws)
    logging.Logger.verbose = verbose
    if terse:
        root = multiprocessing.get_logger()
        for handler in root.handlers[:]:
            root.removeHandler(handler)
        mylogger = multiprocessing.get_logger()
        multiprocessing.log_to_stderr()
    else:
        logger_name = "mylogger"
        root = logging.getLogger(logger_name)
        root = multiprocessing.get_logger()
        for handler in root.handlers[:]:
            root.removeHandler(handler)
        mylogger = logging.getLogger(logger_name)
        log_path = "./pypuller.log"
        fh = logging.FileHandler(log_path)
        fh.setLevel(logging.VERBOSE)
        sh = logging.StreamHandler()
        sh.setLevel(logging.VERBOSE)
        fmt = "%(asctime)-15s %(levelname)s %(filename)s %(lineno)d %(process)d %(message)s"
        datefmt = "%a %d %b %Y %H:%M:%S"
        formatter = logging.Formatter(fmt, datefmt)
        fh.setFormatter(formatter)
        sh.setFormatter(formatter)
        mylogger.addHandler(fh)
        mylogger.addHandler(sh)
    return mylogger
def git_submit():                       # {{{1}}}
    global options
    log_dir = options['log_dir']
    mylogger.info('commit the new data')
    git_diff = "git diff"
    proc = subprocess.Popen(
            git_diff,
            shell  = True,
            cwd    = log_dir,
            stdin  = subprocess.PIPE,
            stdout = subprocess.PIPE,
    )
    proc.wait()
    git_add  = "git add -A ."
    subprocess.Popen(git_add  , shell=True , cwd=log_dir)
    git_cm   = "git commit -am 'new commit'"
    subprocess.Popen(git_cm   , shell=True , cwd=log_dir)
    git_st   = "git status"
    proc = subprocess.Popen(git_st   , shell=True , cwd=log_dir)
def netconf(hostname, user, password, attempt_max=10, normalize=True):  # {{{2}}}
    '''
    connect to hostname via netconf over ssh
    return dev if succeed
    return None on 'ConnectAuthError' error
    retry attempt_max time on other errors
    '''
    for attempt in range(1, attempt_max):
        mylogger.debug("attempting netconf(%s/%s)!" % (attempt, attempt_max))
        try:                            # {{{3}}}
            dev = Device(host=hostname, user=user, password=password,
                         gather_facts=False, normalize=normalize, auto_probe=5)
            dev.open()
            dev.protocol = 'netconf'
            mylogger.info("%s connected!" % hostname)
            return dev
        except ConnectAuthError:        # {{{3}}}
            mylogger.warning(
                    "%s:ConnectAuthError, check the user name and password!"
                    % hostname)
            return None
        except ConnectRefusedError:     # {{{3}}}
            mylogger.warn("%s:ConnectRefusedError, check the host config!"
                    % hostname)
            return None
        except ConnectNotMasterError:   # {{{3}}}
            raise
            return None
        except ConnectTimeoutError:     # {{{3}}}
            mylogger.warn("%s:ConnectTimeOutError, will reconnect afer 10s..."
                           % hostname)
            sleep(10)
        except ConnectClosedError:      # {{{3}}}
            mylogger.warn("%s:ConnectClosedError, will reconnect afer 10s..."
                    % hostname)
            sleep(10)
        except ProbeError:      # {{{3}}}
            mylogger.warning(
                    "%s:ProbeError, check netconf connectivity!" % hostname)
            return None
        except Exception as e:                         # {{{3}}}
            print e
            mylogger.warn("%s:unexpected error: %s" % \
                          (hostname, sys.exc_info()[0]))
            sleep(10)
    else:
        return None
def ssh(hostname, user, password, port=22):  # {{{2}}}
    mylogger.debug("attempting ssh to %s!" % hostname)
    paramiko.util.log_to_file('./pypuller_ssh.log')
    s = paramiko.SSHClient()
    s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    s.load_system_host_keys()
    s.connect(hostname, port, user, password)
    dev = s
    dev.protocol = 'ssh'
    dev.hostname = hostname
    return dev
def connection(host):  # {{{2}}}
    '''
    TODO: handle all connections:
    * netconf
    * ssh
    * others
    '''
    final       = getfinal(host, options)
    mylogger.verbose("%s's final looks:\n%s" % (host, pprint.pformat(final)))
    hostname    = final['hostname']
    user        = final['user']
    password    = final['password']
    attempt_max = final['attempt_max']
    port        = final['port']
    re0         = final['re0']
    re1         = final['re1']
    protocol    = final['protocol']
    normalize   = final['normalize']
    dev = None
    try:
	mylogger.info("connecting to %s ..." % host)
	mylogger.debug("protocol looks %s ..." % protocol)
        if protocol == 'netconf':
            mylogger.verbose("connecting via netconf")
            dev = netconf(hostname=hostname, user=user, password=password,
                          attempt_max=attempt_max, normalize=normalize)
        elif protocol == 'ssh':
            mylogger.verbose("connecting via ssh")
            dev = ssh(hostname, user, password, port)
        elif protocol == 'smart':
            mylogger.debug("will attempt with netconf and ssh if failed ...")
            mylogger.debug("attempting with netconf ...")
            dev = netconf(hostname=hostname, user=user, password=password,
                          attempt_max=attempt_max, normalize=normalize)
            if dev is None:
                mylogger.debug("attempting with netconf failed...")
                mylogger.debug("attempting ssh ...")
                dev = ssh(hostname, user, password, port)
        else:
            mylogger.info("non-supported protocol %s ..." % protocol)
            pass
    except ConnectNotMasterError:                   # {{{3}}}
        if re0 and re1:
            mylogger.info("ConnectNotMasterError, connect to the other RE...")
            if host == re0:
                mylogger.info(" (since current RE0 is not master, go RE1...)")
                dev = netconf(re1, user, password, attempt_max)
            else:
                mylogger.info(" (since current RE1 is not master, go RE0...)")
                dev = netconf(re0, user, password, attempt_max)
        else:
            mylogger.info("ConnectNotMasterError, other RE info N/A...")
    except Exception as e:                          # {{{3}}}
        print e
        mylogger.warn("%s:unexpected error: %s" % \
                      (hostname, sys.exc_info()[0]))
    finally:                                        # {{{3}}}
        if dev is None:
            mylogger.info("%s login failed", host)
        return dev
def save_cli_thread(dev, host, cli, fname=None):                 # {{{2}}}
    '''
    one thread: 
    * only send one cli to a host
    * write the output to a file
    '''
    name = threading.currentThread().getName()
    mylogger.info('--->thread "%s" started, PID(%s)...' % \
                    (name, os.getpid())
    )
    start = time()
    if dev.protocol == 'netconf':
        cli_output = dev.cli(cli, warning=False)
    elif dev.protocol == 'ssh':
        stdin, stdout, stderr = dev.exec_command(cli)
        cli_output = stdout.read()
    mylogger.verbose("output of cli '%s' looks:\n%s" % (cli, cli_output))
    write_file(fname, cli_output)
    end = time()
    mylogger.info('<---thread %s exited (%0.2f sec).' % \
                    (name, (end - start))
    )
def save_cli_process_mthread(options, host, fname=None): # {{{2}}}
    '''
    one process, to login one host
    then multi-threading, each for a cli
    '''
    final = getfinal(host, options)
    cli_list = final.get('cli_list')
    dev = connection(host)
    result                  = {}
    result['scanned']       = host
    result['connected']     = None
    result['failed']        = None
    if dev is not None:
        result['connected'] = host
    else:
        result['failed']    = host
    if dev is not None:
        if fname is None:
            fname = "%s_%s" % (dev.hostname, curr_time())
            fname = dev.hostname
            fname_full = options['log_dir'] + '/' + fname
        else:
            fname_full = fname
        mylogger.verbose("log file full path looks:" + fname_full)
        if os.path.isfile(fname_full):
            os.remove(fname_full)
        threads = []
        for cli in cli_list:
            t = threading.Thread(
                    name='"' + cli + '"',
                    target=save_cli_thread,
                    args=(dev, host, cli, fname_full)
            )
            threads.append(t)
            t.start()
        for t in threads:
            t.join()
    return result
def save_cli_mprocess_mthread(options, fname=None): # {{{2}}}
    host_list = options['host_list']
    cli_list  = options['cli_list']
    jobs = []
    for host in host_list:
        mylogger.debug("get a host: %s" % host)
        process_name = host
        p = multiprocessing.Process(name=process_name,
                                    target=save_cli_process_mthread,
                                    args=(options, host, fname))
        p.daemon = True
        jobs.append(p)
    for p in jobs:
        p.start()
    for p in jobs:
        p.join()
def getfinal(host, options):  # {{{1}}}
    '''
    parse options, and get the final parameter based on hostname
    '''
    final = {}
    for key in options:
        final[key] = options.get(key)
    final.pop('host', None)
    if options.get('host', {}):
        host_indiv = options['host'].get(host, [])
        if host_indiv:
            for key in host_indiv[0]:
                if not host_indiv[0].get(key, None):
                    final[key] = host_indiv[0].get(key)
            if final.get('access', None) is not None:
                for key in final['access']:
                    if final['access'].get(key, None) is not None:
                        final[key] = final['access'].get(key)
                final.pop('access', None)
            if len(host_indiv) > 1:
                final['cli_list'] = host_indiv[1].get('clies', options['cli_list'])
            else:
                final['cli_list'] = options['cli_list']
    if not final.get('hostname', None):
        final['hostname'] = host
    return final
def args_def(options): # {{{1}}}
    '''
    define the CLI arguments
    '''
    parser = argparse.ArgumentParser(prog='pypuller', 
             description='A script to pull CLI info from devices(hosts).')
    login_group = parser.add_argument_group('login info')
    login_group.add_argument('-u', action='store',
                        dest='user',
                        help='user name')
    login_group.add_argument('-p', action='store',
                        dest='password',
                        help='password')
    rtrcli_group = parser.add_argument_group('router/cli info')
    rtrcli_group.add_argument('-R', action='store',
                        dest='host_file',
                        help="a file that has list of hosts")
    rtrcli_group.add_argument('-C', action='store',
                        dest='cli_file',
                        help='a file that has list of CLIes')
    rtrcli_group.add_argument('-r', action='append',
                        dest='host_list',
                        default=[],
                        help='Add hosts to a host_list(can repeat)')
    rtrcli_group.add_argument('-c', action='append',
                        dest='cli_list',
                        default=[],
                        help='Add CLIes to a cli_list(can repeat)')
    verb_group = parser.add_argument_group('verbosity')
    me_group = verb_group.add_mutually_exclusive_group()
    me_group.add_argument('-d', action='count',
                        default=0,
                        dest='debug',
                        help='increase debug verbosity, -dd for even more info')
    me_group.add_argument('-t', '--terse', action='store_true',
                        default=False,
                        dest='terse',
                        help='decrease verbosity')
    other_group = parser.add_argument_group('other optional arguments')
    other_group.add_argument('-n', 
                        dest='processes',
                        help='number of concurrent processes, e.g. 3, \
                            p3(default), 0')
    other_group.add_argument('-P', action='store',
                        dest='protocol',
                        help='protocol (netconf, ssh)')
    other_group.add_argument('-l', action='store',
                        dest='log_dir',
                        help='log dir')
    other_group.add_argument('-y', action='store_true',
                        dest='yaml_file',
                        default=False,
                        help='yaml_file, use "NONE" to suppress')
    other_group.add_argument('-g', action='store_true',
                        default=False,
                        dest='commit',
                        help='commit to repo (via git)')
    other_group.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.1')
    args = parser.parse_args()
    return args
def args_process(args, options): # {{{1}}}
    '''
    process CLI args, and save in options
    '''
    if not args.debug:
        mylogger.setLevel(logging.INFO)
    elif args.debug == 1:
        options['debug'] = args.debug
        mylogger.setLevel(logging.DEBUG)
    elif args.debug > 1:
        options['debug'] = args.debug
        mylogger.setLevel(logging.VERBOSE)
    mylogger.debug('command line options read:')
    mylogger.debug('debug = %r' % args.debug)
    mylogger.debug('user = %r' % args.user)
    mylogger.debug('password = %r' % args.password)
    mylogger.debug('host_file = %r' % args.host_file)
    mylogger.debug('cli_file = %r' % args.cli_file)
    mylogger.debug('log_dir = %r' % args.log_dir)
    mylogger.debug('host_list = %r' % args.host_list)
    mylogger.debug('cli_list = %r' % args.cli_list)
    mylogger.debug('commit = %r' % args.commit)
    mylogger.debug('yaml_file = %r' % args.yaml_file)
    if args.protocol is not None:
        options['protocol'] = args.protocol
    options['port'] = 830 if options['protocol'] == 'netconf' else 22
    if args.host_file is not None:
        options['host_file'] = args.host_file
    if args.cli_file is not None:
        options['cli_file'] = args.cli_file
    if os.path.isfile(options['host_file']):
        try:
            with open(options['host_file'], 'r') as f:
                for line in f:
                    if options['force_hfile']:
                        if not re.sub('#', '', line).strip == '':
                            options['host_list'].append(line.strip())
                    else:
                        if not line.strip().startswith('#') and \
                           not line.strip() == '':
                            options['host_list'].append(line.strip())
        except Exception as e:
            print "file open ERROR:", options['host_file']
            print e
    if os.path.isfile(options['cli_file']):
        try:
            with open(options['cli_file'], 'r') as f:
                for line in f:
                    if options['force_hfile']:
                        if not re.sub('#', '', line).strip == '':
                            options['cli_list'].append(line.strip())
                    else:
                        if not line.strip().startswith('#') and \
                           not line.strip() == '':
                            options['cli_list'].append(line.strip())
        except Exception as e:
            print "file open ERROR", options['cli_file']
            print e
    mylogger.verbose("host_list read from %s:\n%s" % \
            (options['host_file'], pprint.pformat(options['host_list'])))
    mylogger.verbose("cli_list read from %s:\n%s" % \
            (options['cli_file'], pprint.pformat(options['cli_list'])))
    if args.yaml_file:
        options['yaml_file'] = './pypuller.yaml'
    if options['yaml_file'] and os.path.isfile(options['yaml_file']):
        mylogger.debug("yaml_file %s found!" % options['yaml_file'])
        fyaml      = file(options['yaml_file'], 'r')
        pyaml      = yaml.load_all(fyaml)
        pyaml_list = list(pyaml)
        mylogger.verbose("the yaml data looks:\n%s" %
                         pprint.pformat(pyaml_list))
        y0 = pyaml_list[0]
        mylogger.verbose("parameters defined in y0 looks:\n%s" %
                         pprint.pformat(y0))
        for item in y0.items():
            options[item[0]] = item[1]
        mylogger.verbose("options looks after reading from 1st yaml doc:\n%s" %
                         pprint.pformat(options))
        y1              = pyaml_list[1]
        y1_hosts        = [a for a in y1 if a not in ['hosts', 'clies']]
        options['host'] = {}
        for host in y1_hosts:
            options['host'][host] = y1[host]
        if pyaml_list[1].get('hosts', None):
            options['host_list'] = y1_hosts + y1['hosts']
        if pyaml_list[1].get('clies', None):
            options['cli_list']  = y1['clies']
        mylogger.verbose(
                "host_list after read from %s:\n%s" %
                (
                    options['yaml_file'],
                    pprint.pformat(options['host_list'])
                )
        )
    else:
        mylogger.debug("no yaml_file found or skipped by 'NONE'!")
    mylogger.verbose(
            "cli_list after read from %s:\n%s" %
            (options['yaml_file'], pprint.pformat(options['cli_list']))
    )
    if args.user is not None:
        options['user'] = args.user
    if args.password is not None:
        options['password'] = args.password
    if args.log_dir is not None:
        options['log_dir'] = args.log_dir
    if not os.path.exists(options['log_dir']):
        os.makedirs(options['log_dir'])
    if args.commit is not None:
        options['commit'] = args.commit
    if args.host_list:
        options['host_list'] = args.host_list
    if args.cli_list:
        options['cli_list'] = args.cli_list
    mylogger.verbose("final host_list:\n%s" %
                     pprint.pformat(options['host_list']))
    mylogger.verbose("final cli_list:\n%s" %
                     pprint.pformat(options['cli_list']))
    if options['processes'] > len(options['host_list']):
        options['processes'] = len(options['host_list'])
    if args.processes is not None:
        r = re.match('(\d)(c?)', args.processes)
        if r:
            if r.group(2):
                options['processes'] = multiprocessing.cpu_count() * \
                                       int(r.group(1))
            else:
                options['processes'] = r.group(1)
        else:
            mylogger.warn('wrong -n spec, use default')
    mylogger.verbose("after processing command line args options looks:\n%s" %
                     pprint.pformat(options))
    return options
class Worker(multiprocessing.Process): # {{{1}}}
    def __init__(self, task_queue, result_queue):       # {{{2}}}
        mylogger.verbose("initiating a Worker...")
        multiprocessing.Process.__init__(self)
        self.task_queue = task_queue
        self.result_queue = result_queue
    def run(self):                                      # {{{2}}}
        proc_name = self.name
        mylogger.debug(proc_name + ' get started (in "run")...')
        mylogger.info('===>Process %s PID(%s) started...' %
                      (proc_name, os.getpid()))
        start = time()
        while True:
            mylogger.debug(proc_name + " try to get a task...")
            next_task = self.task_queue.get()
            mylogger.debug('%s:got a (next) task:%s from tasks queue' %
                            (proc_name, next_task))
            if next_task is None:
                mylogger.debug('%s: got a None task, Exiting' % proc_name)
                self.task_queue.task_done()
                break
            mylogger.debug('%s: object (Task) call to get it executed' %
                            proc_name)
            result = next_task()
            self.task_queue.task_done()
            if result is not None:
                self.result_queue.put(result)
        end = time()
        mylogger.info('<===Process %s exited (%0.2f sec).' %
                      (proc_name, (end - start)))
        return
class Task(object):  # {{{1}}}
    def __init__(self, options, host):  # {{{2}}}
        self.options = options
        self.host = host
        mylogger.debug('Task init: %s ...' % (self.host))
    def __call__(self):                 # {{{2}}}
        mylogger.debug('task called to be executed:%s ...' % (self.host))
        result = save_cli_process_mthread(options, self.host, fname=None)
        return result
    def __str__(self):                  # {{{2}}}
        return '%s' % (self.host)
def main():                     # {{{1}}}
    global options
    global mylogger
    if 1:   # scanning hosts: mp+mt{{{2}}}
        args = args_def(options)
        mylogger = logger(args.terse)
        name = multiprocessing.current_process().name
        mylogger.info('====Parent process %s started, PID(%s)...' % \
                        (name, os.getpid())
        )
        start = time()
        options = args_process(args, options)
        mylogger.debug("create a Queue as tasks queue")
        tasks = multiprocessing.JoinableQueue()
        mylogger.debug("create a Queue as results queue")
        results = multiprocessing.Queue()
        num_workers = options['processes']
        mylogger.debug("create %s workers" % num_workers)
        workers = [Worker(tasks, results) for i in xrange(num_workers)]
        mylogger.verbose("list of workers looks %s" % pprint.pformat(workers))
        mylogger.debug("start all %s workers, 1s interval" % num_workers)
        for w in workers:
            w.start()
        host_list = options['host_list']
        cli_list  = options['cli_list']
        for host in host_list:
            mylogger.debug("get a host: %s, put in tasks queue..." % host)
            process_name = host
            tasks.put(Task(options, host))
        mylogger.debug("put %s poison tasks" % num_workers)
        for i in xrange(num_workers):
            tasks.put(None)
        mylogger.debug("tasks.join")
        tasks.join()
        results_stat = {"scanned": [], "connected": [], "failed": []}
        while True:
            if results.empty():
                break
            else:
                result=results.get()
                for k,v in result.iteritems():
                    if v is not None:
                        results_stat[k].append(v)
        host_file_pypuller = options['host_file'] + '.result'
        mylogger.info("hosts scan result saved to: %s" % host_file_pypuller)
        write_file(host_file_pypuller, "", 'w')
        write_file(host_file_pypuller, "\n# connected\n")
        write_file(host_file_pypuller, "\n".join(results_stat["connected"]))
        write_file(host_file_pypuller, "\n# failed\n")
        write_file(host_file_pypuller, 
                   "\n".join(["# %s" % host for host in results_stat["failed"]])
                  )
        mylogger.warn("hosts scan result statistics:\n %s" %
                        pprint.pformat(results_stat))
        if options['commit']:
            git_submit()
        end = time()
        mylogger.info('====Task %s runs %0.2f seconds.' % \
                        (name, (end - start))
        )
if __name__ == '__main__':          # {{{1}}}
    main()
